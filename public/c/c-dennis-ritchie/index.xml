<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C Programming by Dennis Ritchie on #Define</title>
    <link>https://hashdefine2.netlify.app/c/c-dennis-ritchie/</link>
    <description>Recent content in C Programming by Dennis Ritchie on #Define</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 23 Jan 2019 23:12:30 +0530</lastBuildDate><atom:link href="https://hashdefine2.netlify.app/c/c-dennis-ritchie/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Preface</title>
      <link>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-21-preface/</link>
      <pubDate>Mon, 21 Jan 2019 23:15:53 +0520</pubDate>
      
      <guid>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-21-preface/</guid>
      <description>What C gets right.  C is a general-purpose programming language. It is not a very high level language, nor a big one. It was originally designed for and implemented on the UNIX operating system. Very useful for writing operating system, compilers and system programs and hence it is also called a &amp;ldquo;systems programming language&amp;rdquo;. Many important ideas in C stem from BCPL and B. [BCPL -&amp;gt; B -&amp;gt; C] BCPL and B are &amp;ldquo;typeless&amp;rdquo; languages, they don&amp;rsquo;t have data types defined.</description>
    </item>
    
    <item>
      <title>A Tutorial Introduction</title>
      <link>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-21-c-programming-chapter-1/</link>
      <pubDate>Mon, 21 Jan 2019 23:16:53 +0530</pubDate>
      
      <guid>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-21-c-programming-chapter-1/</guid>
      <description>main() - The program begins executing at the beginning of main and there must be atleast one in the program.
  &amp;quot;Hello, world&amp;quot; - a sequence of characters in double quotes is called a string constant or character string or string literal.
  /*.....*/ - Multi-line comment.
  The above sizes are machine-dependent.
  Storing foating point number in int truncates it (i.e. strores only the integer part).</description>
    </item>
    
    <item>
      <title>Types, Operators, and Expressions </title>
      <link>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-22-c-programming-chapter-2/</link>
      <pubDate>Tue, 22 Jan 2019 23:16:53 +0530</pubDate>
      
      <guid>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-22-c-programming-chapter-2/</guid>
      <description>Variables  The first haracter must be a letter. Underscore(_) is a letter. Library functions have variable names that start with an underescore. Uppercase and lowercase letters are distinct, X is not the same as x.  Data Type and Sizes    Data type Keyword Size (in Bytes) Range     Character char 1    Integer int 2 -32768 to +32767   Single-precision floating point float 4 10-38to 10+38   Double-precision floating point double 8     Qualifiers can also be applied to these data types.</description>
    </item>
    
    <item>
      <title>Control Flow</title>
      <link>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-22-c-programming-chapter-3/</link>
      <pubDate>Tue, 22 Jan 2019 23:16:53 +0530</pubDate>
      
      <guid>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-22-c-programming-chapter-3/</guid>
      <description>Statements and Blocks  An expression like i+2, i++, or printf(...) terminated by a ; becomes a statement in C. Braces { and } are used to group statements inside a compound statement or a block.  If-Else  In if-else the else part is optional. if checks the numeric value of an expression after evaluating it.  We might do -
if(x)	//non-zero value implicitly means true  //instead of  if(x !</description>
    </item>
    
    <item>
      <title>Functions and Program Structure</title>
      <link>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-22-c-programming-chapter-4/</link>
      <pubDate>Tue, 22 Jan 2019 23:16:53 +0530</pubDate>
      
      <guid>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-22-c-programming-chapter-4/</guid>
      <description>Some advantages of using functions  Large computing tasks can be separated into smaller ones, so long as no function is split. Abstraction Easing the pain of making chanfges to code Source program can be stored across multiple files Code reusability  Basics of Functions return-type function-name(argument declarations) { declarations and statements //body }  If the return type is omitted during function declaration, it is assumed to be int. To return a value to the caller return is used.</description>
    </item>
    
    <item>
      <title>Pointers and Arrays</title>
      <link>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-24-c-programming-chapter-5/</link>
      <pubDate>Thu, 24 Jan 2019 04:50:21 +0530</pubDate>
      
      <guid>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-24-c-programming-chapter-5/</guid>
      <description>Pointers and Addresses  Address Of Operator &amp;amp; can be applied to any memory object such as an array or a variable, not to any expression, constant, or register variable.  p = &amp;amp;c;	//p stores address of c  //remember p is a pointer type variable  int *p; //pointer to an int, this says that value at *p is an int  Dereferencing or Indirection - * (value at) is the unary dereferencing operator and is used to access the value stored at a memory location.</description>
    </item>
    
    <item>
      <title>Structures</title>
      <link>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-26-c-programming-chapter-6/</link>
      <pubDate>Sat, 26 Jan 2019 23:47:11 +0530</pubDate>
      
      <guid>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-26-c-programming-chapter-6/</guid>
      <description>Definition A structure is a collection of one or more variables, possibly of different types, grouped together under a single name for convenient handling.
Basics   A point is nothing but a pair of coordinates and a collection of points makes a rectangle.
  struct keyword is used.
  struct point { int x;	int y;	//members }; An optional name called a structure tag may follow the word struct.</description>
    </item>
    
    <item>
      <title>Input and Output</title>
      <link>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-27-c-programming-chapter-7/</link>
      <pubDate>Sun, 27 Jan 2019 15:02:31 +0530</pubDate>
      
      <guid>https://hashdefine2.netlify.app/c/c-dennis-ritchie/2019-01-27-c-programming-chapter-7/</guid>
      <description>Introduction Input and output are not part of the C language itself. They are provided by the standard library.
Standard Input and Output   int getchar(void) returns the next symbol from the input stream, or EOF whose value is typically -1.
  The function int putchar(int) is used for output: putchar(c) puts the character c on the standard output, which is by default the screen. putchar returns the character written, or EOF if an error occurs.</description>
    </item>
    
  </channel>
</rss>
